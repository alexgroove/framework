######################################################################
######################################################################

	README --- IMPORTANT

######################################################################
######################################################################



######################################################################
######################################################################
	
--- MANIFESTO ---
 
This Framework wants to be a pure representation of the MVC pattern. It used PHP, MYSQL, XSLT and XML to reach his goal. For the PHP part, it implements to concept of namespaces and the PDO extension for accessing the Database. Informations is stock in MYSQL. For the View in MVC, the Framework use XSLT, separating completely the view from the logic. Every request is treat as a route by the front controller, the Router and then dispatch to a secondary controller that fetch the data using Model over the Database and pass them to the XSLT processor as XML data. The view then use XSL templates over the XML and render the view.


######################################################################
######################################################################




Sections
1. Installation
2. Usage
3. Deployement
3. FAQ




######################################################################
### Installation
######################################################################

1- Install the framework folder on your server
2- Change the database credentials in config.php




######################################################################
### Usage
######################################################################

The framework works like a router, every action is a predefined route. If you want to add routes, add them in Migrations/routes.sql, and run in your browser http://localhost/.update-routes.php

1- Adding a route: You need to know the HTTP method, the route path, the controller name, the action name
examples:  
GET about MainController about 
GET products/:id ProductsController show
POST products/update ProductsController update

You can use the wild cards (:id) to pass parameters in the controller action
=> GET categories/:id/products/:id ProductsController show
=> ProductsController::show($category_id, $product_id)


2- Add the controller in App/Controllers folder. When creating a file on the framework, always make sure to use all the needed namespace and put the right namespace of the file it self. Namespaces matches the directory architecture from the root. Also the add security on your file, make sure to add this line after the namespace declaration: 
defined('CORE_EXEC') or die('Restriced Access');
This line prevent loading independent file with passing by the index.php






######################################################################
### Deployement
######################################################################

When deploying the framework in production mode
1- Set the ENVIRONMENT global in config.php to 'production'.
2- REMOVE Migrations folder, because it contains all your database architecture and all the routes of your framework, and you dont wnat that to be visible.
3- REMOVE .update-routes.php




######################################################################
### FAQ
######################################################################

-------------------------------
---  How to create a view ? --- 
-------------------------------
1- First create a folder link to your controller in App/Views/
example: if you have a ProductsController, create App/Views/Products/ folder

2- Map the name the controller method to the name of the view file
example: ProductsController::show, create App/Views/Products/show.xsl file

3- Copy and paste the basic empty template example xsl file in App/Views/Templates/empty.xsl
Also feel free to create your own templates. 
By default all views files are parent with the App/Views/Templates/app_template.xsl file. 
So the view file that you a creating is only a partial from the app_template file. 
This extension pattern can also be used in your own partials
example: new.xsl and edit.xsl are two partials that use the same form

4- The content of the first child partial from the app_template is contain in the xsl:template that match the XML_PARTIAL_CONTAINER (as you can see in the empty.xsl file)

5- The App/Views/Templates/app_template.xsl file is the default template and container of your app. But there is nothing mandatory about this file and feel free to modify it. It is also where you will put all your CSS and JavaScript dependencies. The only IMPORTANT thing is that the content must go in the XML_PARTIAL_CONTAINER. 
example: if you want to divise your app with an admin section, you could create a template file call App/Views/Templates/admin_template.xsl and extends your views with that template.




------------------------------------------
--- How to create a custom component ? ---
------------------------------------------
1- To add a component for your app, create a folder un App/Components/ with the name of your component.

2- Add all the classes needed for this component and create an Exceptions/ folder to put all your exceptions triggers by the classes in this component.

3- Do not add component in the Framework/Components/ because this folder is where the udpates are made, so they will get erase. It also assure the principle that the framework is independent from the App. 

4- The principe of Component is that you can develop them and re-use them, if the Framework is always the same.

example: The app comes with a default SecureController in the App/Components/ folder. You can inspire yourself with this component for creating your own.

